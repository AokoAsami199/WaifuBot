// Code generated by go-mockgen 1.1.2; DO NOT EDIT.

package discord

import (
	"sync"

	store "github.com/Karitham/WaifuBot/service/store"
)

// MockStorager is a mock implementation of the Storager interface (from the
// package github.com/Karitham/WaifuBot/discord) used for unit testing.
type MockStorager struct {
	// GetFunc is an instance of a mock function object controlling the
	// behavior of the method Get.
	GetFunc *StoragerGetFunc
	// PutFunc is an instance of a mock function object controlling the
	// behavior of the method Put.
	PutFunc *StoragerPutFunc
}

// NewMockStorager creates a new mock of the Storager interface. All methods
// return zero values for all results, unless overwritten.
func NewMockStorager() *MockStorager {
	return &MockStorager{
		GetFunc: &StoragerGetFunc{
			defaultHook: func(int) ([]store.Character, error) {
				return nil, nil
			},
		},
		PutFunc: &StoragerPutFunc{
			defaultHook: func(int, store.Character) error {
				return nil
			},
		},
	}
}

// NewMockStoragerFrom creates a new mock of the MockStorager interface. All
// methods delegate to the given implementation, unless overwritten.
func NewMockStoragerFrom(i Storager) *MockStorager {
	return &MockStorager{
		GetFunc: &StoragerGetFunc{
			defaultHook: i.Get,
		},
		PutFunc: &StoragerPutFunc{
			defaultHook: i.Put,
		},
	}
}

// StoragerGetFunc describes the behavior when the Get method of the parent
// MockStorager instance is invoked.
type StoragerGetFunc struct {
	defaultHook func(int) ([]store.Character, error)
	hooks       []func(int) ([]store.Character, error)
	history     []StoragerGetFuncCall
	mutex       sync.Mutex
}

// Get delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockStorager) Get(v0 int) ([]store.Character, error) {
	r0, r1 := m.GetFunc.nextHook()(v0)
	m.GetFunc.appendCall(StoragerGetFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Get method of the
// parent MockStorager instance is invoked and the hook queue is empty.
func (f *StoragerGetFunc) SetDefaultHook(hook func(int) ([]store.Character, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Get method of the parent MockStorager instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *StoragerGetFunc) PushHook(hook func(int) ([]store.Character, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *StoragerGetFunc) SetDefaultReturn(r0 []store.Character, r1 error) {
	f.SetDefaultHook(func(int) ([]store.Character, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *StoragerGetFunc) PushReturn(r0 []store.Character, r1 error) {
	f.PushHook(func(int) ([]store.Character, error) {
		return r0, r1
	})
}

func (f *StoragerGetFunc) nextHook() func(int) ([]store.Character, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoragerGetFunc) appendCall(r0 StoragerGetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoragerGetFuncCall objects describing the
// invocations of this function.
func (f *StoragerGetFunc) History() []StoragerGetFuncCall {
	f.mutex.Lock()
	history := make([]StoragerGetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoragerGetFuncCall is an object that describes an invocation of method
// Get on an instance of MockStorager.
type StoragerGetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []store.Character
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoragerGetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoragerGetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// StoragerPutFunc describes the behavior when the Put method of the parent
// MockStorager instance is invoked.
type StoragerPutFunc struct {
	defaultHook func(int, store.Character) error
	hooks       []func(int, store.Character) error
	history     []StoragerPutFuncCall
	mutex       sync.Mutex
}

// Put delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockStorager) Put(v0 int, v1 store.Character) error {
	r0 := m.PutFunc.nextHook()(v0, v1)
	m.PutFunc.appendCall(StoragerPutFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Put method of the
// parent MockStorager instance is invoked and the hook queue is empty.
func (f *StoragerPutFunc) SetDefaultHook(hook func(int, store.Character) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Put method of the parent MockStorager instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *StoragerPutFunc) PushHook(hook func(int, store.Character) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *StoragerPutFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(int, store.Character) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *StoragerPutFunc) PushReturn(r0 error) {
	f.PushHook(func(int, store.Character) error {
		return r0
	})
}

func (f *StoragerPutFunc) nextHook() func(int, store.Character) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoragerPutFunc) appendCall(r0 StoragerPutFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoragerPutFuncCall objects describing the
// invocations of this function.
func (f *StoragerPutFunc) History() []StoragerPutFuncCall {
	f.mutex.Lock()
	history := make([]StoragerPutFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoragerPutFuncCall is an object that describes an invocation of method
// Put on an instance of MockStorager.
type StoragerPutFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 int
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 store.Character
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoragerPutFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoragerPutFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}
