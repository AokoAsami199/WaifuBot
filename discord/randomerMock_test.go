// Code generated by go-mockgen 1.1.2; DO NOT EDIT.

package discord

import (
	"sync"

	anilist "github.com/Karitham/WaifuBot/service/anilist"
)

// MockRandomer is a mock implementation of the randomer interface (from the
// package github.com/Karitham/WaifuBot/discord) used for unit testing.
type MockRandomer struct {
	// RandomFunc is an instance of a mock function object controlling the
	// behavior of the method Random.
	RandomFunc *RandomerRandomFunc
}

// NewMockRandomer creates a new mock of the randomer interface. All methods
// return zero values for all results, unless overwritten.
func NewMockRandomer() *MockRandomer {
	return &MockRandomer{
		RandomFunc: &RandomerRandomFunc{
			defaultHook: func([]int) (anilist.Character, error) {
				return anilist.Character{}, nil
			},
		},
	}
}

// surrogateMockRandomer is a copy of the randomer interface (from the
// package github.com/Karitham/WaifuBot/discord). It is redefined here as it
// is unexported in the source package.
type surrogateMockRandomer interface {
	Random([]int) (anilist.Character, error)
}

// NewMockRandomerFrom creates a new mock of the MockRandomer interface. All
// methods delegate to the given implementation, unless overwritten.
func NewMockRandomerFrom(i surrogateMockRandomer) *MockRandomer {
	return &MockRandomer{
		RandomFunc: &RandomerRandomFunc{
			defaultHook: i.Random,
		},
	}
}

// RandomerRandomFunc describes the behavior when the Random method of the
// parent MockRandomer instance is invoked.
type RandomerRandomFunc struct {
	defaultHook func([]int) (anilist.Character, error)
	hooks       []func([]int) (anilist.Character, error)
	history     []RandomerRandomFuncCall
	mutex       sync.Mutex
}

// Random delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockRandomer) Random(v0 []int) (anilist.Character, error) {
	r0, r1 := m.RandomFunc.nextHook()(v0)
	m.RandomFunc.appendCall(RandomerRandomFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Random method of the
// parent MockRandomer instance is invoked and the hook queue is empty.
func (f *RandomerRandomFunc) SetDefaultHook(hook func([]int) (anilist.Character, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Random method of the parent MockRandomer instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *RandomerRandomFunc) PushHook(hook func([]int) (anilist.Character, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *RandomerRandomFunc) SetDefaultReturn(r0 anilist.Character, r1 error) {
	f.SetDefaultHook(func([]int) (anilist.Character, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *RandomerRandomFunc) PushReturn(r0 anilist.Character, r1 error) {
	f.PushHook(func([]int) (anilist.Character, error) {
		return r0, r1
	})
}

func (f *RandomerRandomFunc) nextHook() func([]int) (anilist.Character, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RandomerRandomFunc) appendCall(r0 RandomerRandomFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of RandomerRandomFuncCall objects describing
// the invocations of this function.
func (f *RandomerRandomFunc) History() []RandomerRandomFuncCall {
	f.mutex.Lock()
	history := make([]RandomerRandomFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RandomerRandomFuncCall is an object that describes an invocation of
// method Random on an instance of MockRandomer.
type RandomerRandomFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 []int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 anilist.Character
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c RandomerRandomFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RandomerRandomFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}
