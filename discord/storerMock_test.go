// Code generated by go-mockgen 1.1.2; DO NOT EDIT.

package discord

import (
	"sync"

	store "github.com/Karitham/WaifuBot/service/store"
)

// MockStorer is a mock implementation of the storer interface (from the
// package github.com/Karitham/WaifuBot/discord) used for unit testing.
type MockStorer struct {
	// GetFunc is an instance of a mock function object controlling the
	// behavior of the method Get.
	GetFunc *StorerGetFunc
	// PutFunc is an instance of a mock function object controlling the
	// behavior of the method Put.
	PutFunc *StorerPutFunc
}

// NewMockStorer creates a new mock of the storer interface. All methods
// return zero values for all results, unless overwritten.
func NewMockStorer() *MockStorer {
	return &MockStorer{
		GetFunc: &StorerGetFunc{
			defaultHook: func(int) ([]store.Character, error) {
				return nil, nil
			},
		},
		PutFunc: &StorerPutFunc{
			defaultHook: func(int, store.Character) error {
				return nil
			},
		},
	}
}

// surrogateMockStorer is a copy of the storer interface (from the package
// github.com/Karitham/WaifuBot/discord). It is redefined here as it is
// unexported in the source package.
type surrogateMockStorer interface {
	Get(int) ([]store.Character, error)
	Put(int, store.Character) error
}

// NewMockStorerFrom creates a new mock of the MockStorer interface. All
// methods delegate to the given implementation, unless overwritten.
func NewMockStorerFrom(i surrogateMockStorer) *MockStorer {
	return &MockStorer{
		GetFunc: &StorerGetFunc{
			defaultHook: i.Get,
		},
		PutFunc: &StorerPutFunc{
			defaultHook: i.Put,
		},
	}
}

// StorerGetFunc describes the behavior when the Get method of the parent
// MockStorer instance is invoked.
type StorerGetFunc struct {
	defaultHook func(int) ([]store.Character, error)
	hooks       []func(int) ([]store.Character, error)
	history     []StorerGetFuncCall
	mutex       sync.Mutex
}

// Get delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockStorer) Get(v0 int) ([]store.Character, error) {
	r0, r1 := m.GetFunc.nextHook()(v0)
	m.GetFunc.appendCall(StorerGetFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Get method of the
// parent MockStorer instance is invoked and the hook queue is empty.
func (f *StorerGetFunc) SetDefaultHook(hook func(int) ([]store.Character, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Get method of the parent MockStorer instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *StorerGetFunc) PushHook(hook func(int) ([]store.Character, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *StorerGetFunc) SetDefaultReturn(r0 []store.Character, r1 error) {
	f.SetDefaultHook(func(int) ([]store.Character, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *StorerGetFunc) PushReturn(r0 []store.Character, r1 error) {
	f.PushHook(func(int) ([]store.Character, error) {
		return r0, r1
	})
}

func (f *StorerGetFunc) nextHook() func(int) ([]store.Character, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StorerGetFunc) appendCall(r0 StorerGetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StorerGetFuncCall objects describing the
// invocations of this function.
func (f *StorerGetFunc) History() []StorerGetFuncCall {
	f.mutex.Lock()
	history := make([]StorerGetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StorerGetFuncCall is an object that describes an invocation of method Get
// on an instance of MockStorer.
type StorerGetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []store.Character
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StorerGetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StorerGetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// StorerPutFunc describes the behavior when the Put method of the parent
// MockStorer instance is invoked.
type StorerPutFunc struct {
	defaultHook func(int, store.Character) error
	hooks       []func(int, store.Character) error
	history     []StorerPutFuncCall
	mutex       sync.Mutex
}

// Put delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockStorer) Put(v0 int, v1 store.Character) error {
	r0 := m.PutFunc.nextHook()(v0, v1)
	m.PutFunc.appendCall(StorerPutFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Put method of the
// parent MockStorer instance is invoked and the hook queue is empty.
func (f *StorerPutFunc) SetDefaultHook(hook func(int, store.Character) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Put method of the parent MockStorer instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *StorerPutFunc) PushHook(hook func(int, store.Character) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *StorerPutFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(int, store.Character) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *StorerPutFunc) PushReturn(r0 error) {
	f.PushHook(func(int, store.Character) error {
		return r0
	})
}

func (f *StorerPutFunc) nextHook() func(int, store.Character) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StorerPutFunc) appendCall(r0 StorerPutFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StorerPutFuncCall objects describing the
// invocations of this function.
func (f *StorerPutFunc) History() []StorerPutFuncCall {
	f.mutex.Lock()
	history := make([]StorerPutFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StorerPutFuncCall is an object that describes an invocation of method Put
// on an instance of MockStorer.
type StorerPutFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 int
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 store.Character
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StorerPutFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StorerPutFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}
